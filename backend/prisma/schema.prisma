// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  username  String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Onboarding preferences
  onboardingCompleted Boolean @default(false)
  interestedAssets    String[] // Array of crypto symbols user is interested in
  investorType        String?  // "HODLer", "Day Trader", "NFT Collector", etc.
  contentPreferences  String[] // Array of content types: "Market News", "Charts", "Social", "Fun"

  // Relations
  portfolios Portfolio[]
  watchlists Watchlist[]

  @@map("users")
}

model Portfolio {
  id          String   @id @default(cuid())
  name        String
  description String?
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user        User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  holdings    PortfolioHolding[]

  @@map("portfolios")
}

model PortfolioHolding {
  id          String   @id @default(cuid())
  portfolioId String
  symbol      String   // e.g., "BTC", "ETH"
  amount      Float
  buyPrice    Float?
  buyDate     DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  portfolio   Portfolio @relation(fields: [portfolioId], references: [id], onDelete: Cascade)

  @@unique([portfolioId, symbol])
  @@map("portfolio_holdings")
}

model Watchlist {
  id     String @id @default(cuid())
  userId String
  symbol String // e.g., "BTC", "ETH"
  addedAt DateTime @default(now())

  // Relations
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, symbol])
  @@map("watchlists")
}

model CryptoPrice {
  id        String   @id @default(cuid())
  symbol    String   // e.g., "BTC", "ETH"
  price     Float
  marketCap Float?
  volume24h Float?
  change24h Float?
  timestamp DateTime @default(now())

  @@unique([symbol, timestamp])
  @@map("crypto_prices")
}

model NewsArticle {
  id          String   @id @default(cuid())
  title       String
  content     String?
  url         String   @unique
  source      String
  publishedAt DateTime
  sentiment   String?  // "positive", "negative", "neutral"
  createdAt   DateTime @default(now())

  @@map("news_articles")
}
